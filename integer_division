    ///Required Variables:
    uint precision18;
    uint precision36;

    precision18 = 10**18;
    precision36 = 10**36;

    ///Sample use of the helper functions.
    /// Function finds what percent _x is of _total, then usees the found percent to determine a share of a _pool.

    function getDonorReward (uint _x, uint _total, uint _pool) internal view  returns (uint256)  {
        uint percent;
        uint result;
        percent = calculatePercentXofY(_x, _total);
        result = calculateXAsPercentOfY(percent, _pool);
        return result;
    }


    ///Function to find and return the percent that X is of Y. Returns a number that 'represents' a percentage. For example, if the calculation should have returned something like 24.89098098% this would return 2489098098.
    ///Further equations require this number to be very large,
    function calculatePrecisePercentage (uint _x, uint _y) internal pure returns (uint256)  {
        uint precisePercentage;
        precisePercentage = increasePrecision(precision18, _x).mul(100).div(_y);
        return precisePercentage;
    }

    ///Use this function if you want to arrive at a truncated version of the percentage, represented as an integer (meaning 25% would be displayed 25).
    function calculatePercentXofY (uint _precisePercentage) internal pure returns (uint256)  {
        uint percentOfY;
        percentXOfY = _precisePercentage.div(precision18);
        return percentXOfY;
    }

    ///Function to find a given _percent is of _y. For Example, returns 25% of 10
    function calculateXAsPercentOfY(uint256 _percent, uint256 _y) internal pure returns (uint256)  {
        uint precise;
        uint divisor;
        uint x;
        precise = increasePrecision(precision18, _y);
        divisor = calculateDivisor(precision36, _percent);
        x = (precise.div(divisor)).div(100);
        return x;
    }

    ///@author Arq
    ///@dev part of the overall percentage calculation to ensure a high level of precision so truncation does not materially affect calculations.
    function increasePrecision(uint256 _precision, uint256 _value) internal pure returns (uint256)  {
         return _value.mul(_precision);
    }

    ///@author Arq
    ///@notice returns the number we need to divide another number by to represent the percentage. For example, if we want 25% of something, we need to divide a number by 4, 30% of something by 3. Etc.
    ///@dev this is why percents are represented as a whole number.
    ///@param _precision when calculating a divisor you could say 1 div .25 and get 4, but to be more precise we use 10^18 (or higher) to include the numbers that might have been truncated otherwise (also because .25 is not an integer).
    ///@param _percent the percent as a whole number that we want to get. so if we want 25% we use 25 or some multiple of 10 of .25 because, again, .25 is not an integer.
    ///@return returns the divisor used to divide whatever number you want to know the percent of.
    function calculateDivisor(uint256 _precision, uint256 _percent) internal pure returns (uint256)  {
        return _precision.div(_percent);
    }
